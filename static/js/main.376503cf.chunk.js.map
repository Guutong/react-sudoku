{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","isInitial","number","onChange","react_default","a","createElement","onClick","e","className","concat","validate","board","isValid","i","horizontal","Set","vertical","square","j","add","Math","floor","delete","size","Board","state","loading","statusText","timer","submit","_this","clearInterval","interval","setState","restartBoard","fetch","then","res","json","response","initial","map","row","catch","console","log","_this2","this","setInterval","_this3","src_Cell","key","newNumber","Component","App","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.376503cf.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Cell = ({ isInitial, number, onChange }) => (\n  <div\n    onClick={e => {\n      if (isInitial) {\n        return;\n      }\n      onChange((number + 1) % 5);\n    }}\n    className={`cell ${isInitial ? \"initial\" : \"\"}`}\n  >\n    {number !== 0 && number}\n  </div>\n);\nexport default Cell;\n","import React, { Component } from \"react\"\nimport Cell from \"./Cell\"\n\nconst validate = board => {\n  let isValid = true\n  for (let i = 0; i < 4;i++) {\n    const horizontal = new Set()\n    const vertical = new Set()\n    const square = new Set()\n    for (let j = 0; j < 4; j++) {\n      horizontal.add(board[i][j])\n      vertical.add(board[j][i])\n      square.add(\n        board[2 * (i % 2) + (j % 2)][2 * Math.floor(i / 2) + Math.floor(j / 2)]\n      )\n    }\n    horizontal.delete(0)\n    vertical.delete(0)\n    square.delete(0)\n    if (horizontal.size !== 4 || vertical.size !== 4 || square.size !== 4) {\n      isValid = false\n    }\n  }\n  return isValid\n}\n\nclass Board extends Component {\n  interval\n  state = {\n    loading: true,\n    statusText: \"\",\n    timer: 0\n  }\n  submit = () => {\n    const isValid = validate(this.state.board)\n    if (isValid) {\n      clearInterval(this.interval)\n    }\n    this.setState({\n      statusText: isValid ? \"Board is Complete!\" : \"Board is invalid!\"\n    })\n  }\n  restartBoard = () => { \n    this.setState({loading: true})\n    fetch('https://us-central1-skooldio-courses.cloudfunctions.net/react_01/random')\n    .then((res) => res.json())\n    .then((response) => {\n      this.setState({\n        loading: false,\n        statusText: '',\n        board: response.board,\n        timer: 0,\n        initial: response.board.map(row => row.map(i => i !== 0))\n      })\n    })\n    .catch(console.log);\n  }\n  componentDidMount() {\n    this.interval = setInterval(\n      () => this.setState({ timer: this.state.timer + 1 }),\n      1000\n    )\n    this.restartBoard();\n  }\n  componentWillUnmount() {\n    clearInterval(this.interval)\n  }\n  render() {\n    return (\n      <div>\n        <p>Elapsed Time: {this.state.timer} second</p>\n        <div className=\"board\">\n          {this.state.loading && (<p>loading...</p>)}\n          {!this.state.loading && this.state.board.map((row, i) =>\n            row.map((number, j) => (\n              <Cell\n                key={`cell-${i}-${j}`}\n                number={number}\n                isInitial={this.state.initial[i][j]}\n                onChange={newNumber => {\n                  const { board } = this.state\n                  board[i][j] = newNumber\n                  this.setState({ board })\n                }}\n              />\n            ))\n          )}\n        </div>\n        <button className=\"restart-button\" onClick={this.restartBoard}>Restart</button>\n        <button onClick={this.submit}>Submit</button>\n        <p>{this.state.statusText}</p>\n      </div>\n    )\n  }\n}\nexport default Board\n","import React, { Component } from 'react'\nimport Board from './Board'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Board />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}